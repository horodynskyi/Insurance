@typeparam TEntity
@using System.Net.Http.Json
@using Front_endTemplate.Pages
@inject HttpClient _httpClient
@inject IJSRuntime _js
<h3>@typeof(TEntity).Name.Replace("DTO", "").Replace("Output", "")</h3>
<div class="form-group">
    <a class="btn btn-success" href="@Page/create"><i class="oi oi-plus"></i>New</a>
</div>
<br>
@if (data == null)
{
    <text>Loading...</text>
     _js.InvokeVoidAsync("console.log", "data");
}
else if (data.Length == 0)
{
    <text>No Records Found.</text>
    _js.InvokeVoidAsync("console.log", data.Length);
}
else
{
    <div class="wrap">
        <h3 class="title-5 m-b-35">data table</h3>
        <div class="table-data__tool">
            <div class="table-data__tool-left">
                <div class="rs-select2--light rs-select2--md">
                    <select class="form-select" name="property">
                        <option selected="selected">All Properties</option>
                        <option value="">Option 1</option>
                        <option value="">Option 2</option>
                    </select>
                    <div class="dropDownSelect2"></div>
                </div>
                <div class="rs-select2--light rs-select2--sm">
                    <select class="form-select" name="time">
                        <option selected="selected">Today</option>
                        <option value="">3 Days</option>
                        <option value="">1 Week</option>
                    </select>
                    <div class="dropDownSelect2"></div>
                </div>
                <button class="au-btn-filter">
                    <i class="zmdi zmdi-filter-list"></i>filters
                </button>
            </div>
            <div class="table-data__tool-right">
                <div class="rs-select2--dark rs-select2--sm rs-select2--dark2">
                    <select class="form-select" name="type">
                        <option selected="selected">Export</option>
                        <option value="">Option 1</option>
                        <option value="">Option 2</option>
                    </select>
                    <div class="dropDownSelect2"></div>
                </div>
            </div>
        </div>
        <div class="table-responsive table-responsive-data2">
            <table class="table table-data2">
                <thead>
                <tr>
                    <th>
                        <label class="au-checkbox">
                            <input type="checkbox">
                            <span class="au-checkmark"></span>
                        </label>
                    </th>
                    @foreach (var field in data[0].GetType().GetProperties())
                    {
                        <th>@field.Name</th>
                    }
                </tr>
                </thead>
                <tbody>
                @foreach (TEntity entity in data)
                {
                    <tr class="tr-shadow">
                        <td>
                            <label class="au-checkbox">
                                <input type="checkbox">
                                <span class="au-checkmark"></span>
                            </label>
                        </td>
                        @foreach (var field in entity.GetType().GetProperties())
                        {
                            <td>@field.GetValue(entity, null)</td>
                        }

                        <td>
                            <div class="table-data-feature">
                                <button class="item" data-toggle="tooltip" data-placement="top" title="Send">
                                    <i class="zmdi zmdi-mail-send"></i>
                                </button>
                                <button class="item" data-toggle="tooltip" data-placement="top" title="Edit">
                                    <i class="zmdi zmdi-edit"></i>
                                </button>
                                <button class="item" data-toggle="tooltip" data-placement="top" title="Delete"
                                        @onclick="@(() => Delete(@entity.GetType().GetProperty("Id").GetValue(entity, null).ToString()))">
                                    <i class="zmdi zmdi-delete"></i>
                                </button>
                                <button class="item" data-toggle="tooltip" data-placement="top" title="More">
                                    <i class="zmdi zmdi-more"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
    <div class="pagination:container">
        <div class="pagination:number arrow">
            <svg width="18" height="18">
                <use xlink:href="#left" />
            </svg>
            <span class="arrow:text">Previous</span> 
        </div>
  
        @for (int i = 1; i<10;i++)
        {
            <div class="pagination:number">
                @i
            </div>
        }
        
        
  
        <div class="pagination:number arrow">
            <svg width="18" height="18">
                <use xlink:href="#right" />
            </svg>
        </div>
    </div>

    <svg class="hide">
        <symbol id="left" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path></symbol>
        <symbol id="right" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path></symbol>
    </svg>
}

@code {

    [Parameter]
    public string Url { get; set; }

    [Parameter]
    public string Page { get; set; }

    TEntity[] data { get; set; }

    public int PageSize { get; set; } = 10;
    public int PageNumber { get; set; } = 1;

    protected override async Task OnInitializedAsync()
    {
        data = await GetData();
    }

    public async Task<TEntity[]> GetData()
    {
        return await _httpClient.GetFromJsonAsync<TEntity[]>(Url+$"/?PageNumber={PageNumber}&PageSize={PageSize}&OrderBy=id");
    }
    async Task Delete(string Id)
    {
        var entity = data.First(x => x.GetType().GetProperty("Id").GetValue(x, null).ToString() == Id);
        await _js.InvokeVoidAsync("alert", $"{Page}/{Id}");
        if (await _js.InvokeAsync<bool>("confirm", $"Do you want to delete record {entity.GetType().GetProperty("Id").GetValue(entity, null)}?"))
        {
            await _httpClient.DeleteAsync($"{Url}/{Id}");
            await OnInitializedAsync();
            
        }
    }

}